#ifndef SIMPLE_SHELL_H
#define SIMPLE_SHELL_H

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/wait.h>

void write_to_stdout(const char *outputText);
char *readUserInput();
char *_strdup(const char *src);
char *_strncpy(char *dest, const char *src, int n);
char *_strcpy(char *dest, const char *src);
int _strlen(const char *s);
char *_strcat(char *dest, char *src);
void run_user_command(char *command);
void exit_shell(void);
void printCurrent_env_vars(void);

#endif

#include "simple_shell.h"

/**
 * write_to_stdout - prints to the standard output.
 * @outputText: message to be printed.
 *
 * Return: void.
 */
void write_to_stdout(const char *outputText)
{
	int output_length = strlen(outputText);
	int bytes_written = write(STDOUT_FILENO, outputText, output_length);

	if (bytes_written == -1)
		perror("Write error");
}

#include "simple_shell.h"

/**
 * _strcat - concatenates two strings.
 * @dest: string to be concatenated.
 * @src: string to be concatenated.
 *
 * Return: dest.
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}

/**
 * _strdup - mimics the strdup function.
 * @src: the string to be duplicated.
 *
 * Return: the duplicated string.
 */

char *_strdup(const char *src)
{
	char *dest = (char *)malloc(_strlen(src));

	if (dest == NULL)
	{
		perror("malloc");
		return (NULL);
	}
	_strncpy(dest, src, _strlen(src) + 1);

	return (dest);
}



/**
 * _strncpy - copies a string to another.
 *
 * @dest: the string to be copied to.
 * @src: the string to be copied from.
 * @n: the exact number of bytes to be copied.
 *
 * Return: pointer to the copied string (dest).
 */

char *_strncpy(char *dest, const char *src, int n)
{
	int count = 0;

	while (count < n && src[count] != '\0')
	{
		dest[count] = src[count];
		count++;
	}

	while (count < n)
	{
		dest[count] = '\0';
		count++;
	}

	return (dest);
}

/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length
 */

int _strlen(const char *s)
{
	int string_length = 0;

	while (*s != '\0')
	{
		string_length++;
		s++;
	}

	return (string_length);
}

/**
 * readUserInput - reads the input command.
 *
 * Return: the user input.
 */

char *readUserInput()
{
	char input[1024];
	char *userInput;

	if (fgets(input, sizeof(input), stdin) == NULL)
	return (NULL);

	if (_strlen(input) > 0 && input[_strlen(input) - 1] == '\n')
	{
		input[_strlen(input) - 1] = '\0';
	}

	userInput = _strdup(input);
	if (userInput == NULL)
	{
		perror("strdup");
		exit(EXIT_FAILURE);
	}

	return (userInput);
}

#include "simple_shell.h"

/**
 * _strcpy - Copies a string from source to destination.
 * @dest: The destination buffer.
 * @src: The source string to be copied.
 * Return: A pointer to the destination buffer.
 */

char *_strcpy(char *dest, const char *src)
{
	char *dest_start = dest;

	while (*src)
	{
		*dest++ = *src++;
	}

	*dest = '\0';

	return (dest_start);
}

/**
 * run_user_command - executes the user input command.
 * @command: the user input.
 */
void run_user_command(char *command)
{
	char *args[] = {"/bin/sh", "-c", NULL, NULL};
	int status;
	pid_t pid;
	char error_msg[] = "Command exited with error: ", *full_error_msg;

	if (access(command, X_OK) == -1)
	{
		write_to_stdout("Command does not exist or not executable\n");
		return;
	}
	pid = fork();
	if (pid == -1)
	{
		perror("fork()");
		exit(EXIT_FAILURE);
	}
	if (pid == 0)
	{
		args[2] = command;
		if (execve("/bin/sh", args, NULL) == -1)
		{
			perror("execve");
			exit(EXIT_FAILURE);
		}
	}
	else
	{
		wait(&status);
		if (WEXITSTATUS(status) && WEXITSTATUS(status) != 0)
		{
			full_error_msg = malloc(_strlen(error_msg) + _strlen(command) + 1);
			if (full_error_msg == NULL)
			{
				perror("malloc");
				exit(EXIT_FAILURE);
			}
			_strcpy(full_error_msg, error_msg);
			_strcat(full_error_msg, command);
			write_to_stdout(full_error_msg);
			free(full_error_msg);
		}
	}
}

#include "simple_shell.h"

/**
 * printCurrent_env_vars - prints the current environment variables.
 *
 */

void printCurrent_env_vars(void)
{
	int i = 0;
	char *env_var;
	extern char **environ;

	while (1)
	{
		if (environ != NULL)
		{
			env_var = environ[i];
		}
		if (env_var == NULL)
			break;

		write_to_stdout(env_var);
		write_to_stdout("\n");
		i++;
	}
}

/**
 * _strcmp - function that compares two strings.
 *
 * @s1: string 1.
 * @s2: string 2.
 *
 * Return: 0.
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}

	return (0);
}

/**
 * exit_shell - Exit the shell.
 */
void exit_shell(void)
{
	write_to_stdout("Exiting the shell...\n");
	exit(0);
}

/**
 * main - entry point.
 *
 * Return: Always 0.
 */

int main(void)
{
	char *input;

	while (1)
	{
		write_to_stdout("kings_shell$$> ");
		input = readUserInput();

		if (input != NULL)
		{
			if (_strcmp(input, "exit") == 0)
			{
				free(input);
				exit_shell();
			}
			else if (_strcmp(input, "env") == 0)
			{
				free(input);
				printCurrent_env_vars();
			}
			else
			{
				run_user_command(input);
				free(input);
			}
		}
	}
	return (0);
}
